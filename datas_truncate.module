<?php
// datas_truncate


/**
 * Implements hook_menu().
 */
function datas_truncate_menu()
{
    $items = array();
    $items['admin/content/datas_truncate'] = array(
        'title' => 'Mass Truncate : nodes, user or terms',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('datas_truncate_form'),
        'access callback' => TRUE,
        'description' => 'Delete all',
        'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    );

    return $items;

}


function datas_truncate_form($form, &$form_state)
{

    $choices= variable_set('truncates_datas_save',array());
    global $user;
    $node_types = node_type_get_types();
    $vocabularies = taxonomy_get_vocabularies();
    $roles = user_roles();

    if (!isset($form_state['storage']['confirm'])) {
        $node_types = node_type_get_types();
        $vocabularies = taxonomy_get_vocabularies();
        $roles = user_roles();
        foreach ($node_types as $node_type) {
            $options_node[$node_type->type] = array(
                'type' => $node_type->type,
                'name' => $node_type->name,
                'count' => count(_retrieve_node($node_type->type))
            );
            $node_types_val[$node_type->type] = $node_type->name . '(' . $node_type->type . ') ' . count(_retrieve_node($node_type->type));
        }
        $header = array(
            'name' => t('name'),
            'type' => t('Machine name'),
            'count' => t('Count')
        );

        $form['node'] = array(
            '#type' => 'tableselect',
            '#header' => $header,
            '#options' => $options_node,
            '#empty' => t('No users found'),
            '#prefix' => t('Nodes')
        );
        foreach ($vocabularies as $vocabulary) {
            $options_voc[$vocabulary->vid] = array(
                'vid' => $vocabulary->vid,
                'name' => $vocabulary->name,
                'machine_name' => $vocabulary->machine_name,
                'count' => count(_retrieve_term($vocabulary->vid)),
            );
        }
        $header = array(
            'vid' => t('Vid'),
            'name' => t('Name'),
            'machine_name' => t('Machine name'),
            'count' => t('Count')

        );

        $form['vocabulary'] = array(
            '#type' => 'tableselect',
            '#header' => $header,
            '#options' => $options_voc,
            '#empty' => t('No vocabulary found'),
            '#prefix' => t('Terms by vocabulary')
        );

        unset($roles[0]);
        foreach ($roles as $k => $v) {
            $roles[$k] = $v . ' - ' . count(_retrieve_user($k));
            $optionroles[$k] = array(
                'rid' => $k,
                'name' => $v,
                'count' => count(_retrieve_user($k))
            );
        }
        $header = array(
            'rid' => t('Rid'),
            'name' => t('Name'),
            'count' => t('Count')

        );
        $form['roles'] = array(
            '#type' => 'tableselect',
            '#header' => $header,
            '#options' => $optionroles,
            '#empty' => t('No users found'),
            '#prefix' => t('Users by roles')
        );
        $header = array(
            'field'=>t('Field name'),
            'label'=>t('intitulÃ©'),
            'type'=>t('Field type'),
            'bundle'=>t('Used in'),
            'entity_type'=>t('Entity type'),
            );
        $form['fields'] =
        array(
            '#type' => 'tableselect',
            '#header' => $header,
            '#options' => _retrieve_fields_form(),
            '#empty' => t('No fields found'),
            '#prefix' => t('Fields')
        );


        $form['remember_choice'] = array(
            '#title' => t('Remember this choice'),
            '#type' => 'checkbox',
            '#value' => '',

        );
        $form['submit'] = array(
            '#type' => 'submit',
            '#value' => 'Submit',
        );


    } else {


        $content = t('Do you want delete : ');
        $values =  $_SESSION['values'];
        $values['roles'] = array_filter($values['roles']);
        $values['node'] = array_filter($values['node']);
        $values['vocabulary'] = array_filter($values['vocabulary']);
        $values['fields'] = array_filter($values['fields']);
        foreach($values['node'] as $node_type){
            $content.= "<br/>".t("Delete node type :type_node",array(":type_node" => $node_types[$node_type]->name));
        }
        foreach($values['vocabulary'] as $vid){
            $content.= "<br/>".t("Delete terms in vocabulary :voc",array(":voc" => $vocabularies[$vid]->name));
        }
        foreach($values['roles'] as $role_id){
            $content.= "<br/>".t("Delete user in role :role",array(":role" => $roles[$role_id]));
        }
        foreach($values['fields'] as $field){
            $f = explode("#", $field);
            if ($f) {
                $field_name = $f[0];
                $bundle = $f[1];
                $content .= "<br/>" . t("Delete data fields :fieldname in :bundle", array(":fieldname" => $field_name,':bundle'=>$bundle));
            }
        }
        $content.= "<br/>".t("Datas will be deleted if you grant rights for this.");



        $form['intro'] = array('#markup' => $content);
        return confirm_form($form,
            $question = "Do you really want to make the change?",
            current_path(),
            t('This action cannot be undone.'),
            t('Delete'), t('Cancel'));


    }
    return $form;
}

function datas_truncate_form_submit($form, &$form_state)
{



    if (!isset($form_state['storage']['confirm'])) {
        $form_state['storage']['confirm'] = TRUE;
        $values = $form_state['values'];
        $_SESSION['values'] =$values;
        $form_state['rebuild'] = TRUE;

    }else {
        $values =  $_SESSION['values'];
        $values['roles'] = array_filter($values['roles']);
        $values['node'] = array_filter($values['node']);
        $values['vocabulary'] = array_filter($values['vocabulary']);
        unset($_SESSION['values']);
        $operations = array();
        if ($values['remember_choice'] == 1) {
            variable_set('truncates_datas_save', array(
                'roles' => $values['roles'],
                'node' => $values['node'],
                'vocabulary' => $values['vocabulary'],
                'fields' => $values['fields'],
            ));
        } else {
            variable_del('truncates_datas_save');
        }

        foreach ($values['node'] as $k => $v) {
            if ($k === $v) {
                $nids = _retrieve_node($v);
                foreach ($nids as $nid) {
                    $operations[] = array(
                        'delete_node',
                        array($nid),
                    );
                }
            }
        }

        foreach ($values['vocabulary'] as $k => $v) {
            if ($k === $v) {
                $operations[]['delete_term_in_vocabulary'] = array($v);
            }
            if ($k == $v) {
                $tids = _retrieve_term($v);
                foreach ($tids as $tid) {
                    $operations[] = array(
                        'delete_term',
                        array($tid),
                    );
                }
            }
        }
        global $user;
        foreach ($values['roles'] as $k => $v) {
            if ((string)$k === $v) {
                $uids = _retrieve_user($v);
                foreach ($uids as $uid) {
                    if($user->uid!=$uid && $uid>1){
                        $operations[] = array(
                            'delete_user',
                            array($uid),
                        );
                    }
                }
            }
        }
        foreach ($values['fields'] as $k => $v) {
            if ((string)$k === $v) {
                $f = explode("#", $v);
                if ($f) {
                    $field_name = $f[0];
                    $bundle = $f[1];
                    $entity_type = $f[2];
                    $ids = _retrieve_fields($entity_type,$field_name, $bundle);
                    foreach ($ids as $id) {
                        $operations[] = array(
                            'delete_field',
                            array($id, $field_name, $bundle),
                        );
                    }
                }
            }
        }
        if (!empty($operations)) {
            $batch = array(
                'operations' => $operations,
                'title' => t('Processing delete Batch'),
            );
            batch_set($batch);
        }
    }
}



function delete_node($nids)
{
    if(!is_array($nids)){
        $nids=array($nids);
    }
    foreach($nids as $k=>$nid){
        if(!node_access('delete', node_load($nid))){
            unset($nids[$k]);
        }
    }
    node_delete_multiple($nids);
}

function delete_term($tid)
{
    return taxonomy_term_delete($tid);
}

function delete_user($uid)
{
    global $user;
    if($user->uid!=$uid && $uid>1){
        return user_delete($uid);
    }
}
function delete_field($id,$entity_type, $bundle){
    entity_delete_multiple($entity_type, array($id));
}

function _retrieve_user($rid)
{
    global $user;
    $exclude_uid=array($user->uid=>$user->uid, 0=>0, 1=>1);
    $sql = 'SELECT uid FROM {users_roles} WHERE rid = :rid and not uid in (:exclude_uid)';
    $q = db_query($sql, array(':rid' => $rid,':exclude_uid'=>$exclude_uid))->fetchCol();
    return $q;
}

function _retrieve_node($type)
{
    $sql = 'SELECT nid FROM {node} WHERE type = :type';
    $q = db_query($sql, array(':type' => $type))->fetchCol();
    return $q;
}

function _retrieve_term($vid)
{
    $sql = 'SELECT tid FROM {taxonomy_term_data} WHERE vid = :vid';
    $q = db_query($sql, array(':vid' => $vid))->fetchCol();
    return $q;
}


function  _retrieve_fields($entity_type,$field_name, $bundle)
{
    $info = entity_get_info($entity_type);
    return $q;
}


/**
 *  copy from field_ui_fields_list
 */
function  _retrieve_fields_form() {
    $instances = field_info_instances();
    $field_types = field_info_field_types();
    $bundles = field_info_bundles();

    $modules = system_rebuild_module_data();


    $rows = array();
    foreach ($instances as $entity_type => $type_bundles) {
        foreach ($type_bundles as $bundle => $bundle_instances) {
            foreach ($bundle_instances as $field_name => $instance) {
                $field = field_info_field($field_name);
                $field_name_row = $field_name ."#".$bundle.'#'.$entity_type;
                // Initialize the row if we encounter the field for the first time.

                    $rows[$field_name_row]['field'] = $field['locked'] ? t('@field_name (Locked)',
                        array('@field_name' => $field_name)) : $field_name;
                    $module_name = $field_types[$field['type']]['module'];
                    $rows[$field_name_row]['type'] = $module_name. ' -  ' .
                       $field_types[$field['type']]['label'] . ' ' .
                        t('(module: !module)', array('!module' => $modules[$module_name]->info['name']));


                $rows[$field_name_row]['bundle'] =   $bundles[$entity_type][$bundle]['label'];
                $rows[$field_name_row]['label'] =   $instance['label'];
                $rows[$field_name_row]['entity_type'] =   $entity_type;
            }
        }
    }
        ksort($rows);

    return $rows;

}


